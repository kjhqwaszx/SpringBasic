[스프링 웹 개발 기초] _ note 필기
 ** localhost:8080/hello-static.html 진입
  1. 정적(static) 컨텐츠                    -> html로 내린다.
   : 정적인 파일을 유저에게 그대로 내려준다.
  스프링 컨테이너 안에 hello-static 관련 컨트롤러가 없으면 /resources/static 폴더에서 hello-static.html파일을 찾아 유저한테 내려준다.

 ** localhost:8080/hello-mvc?name="tester" 진입
  2. MVC와 템플릿 엔진 (Model,View,Controller).    -> html로 내린다.
   : html파일을 변경하여 유저에게 내려준다.
  스프링 컨테이너 안의 Controller에서 GetMapping("hello-mvc")의 return 값(파일명)을 viewResolver가 /resources/templates폴더에서 찾아 내려준다.
  model을 통해 param 전달이 가능해 html을 변경할 수 있다.


 ** localhost:8080/hello-api?name="tester" 진입
  3. API.    -> 데이터를 JSON 타입으로 내린다.
   : 서버에서 JSON 데이터 포맷을 내려준다. 화면은 클라이언트에서 그린다.
  스프링 컨테이너 안의 Controller에서 GetMapping("hello-api")의 return값을 HttpBody에 담아 return한다.
  @ResponseBody가 선언되어있어 HttpMessageConverter를 호출하고 return값이 Object면 JsonConverter를, String이면 StringConverter을 통해 전달한다.


---

< 스프링 프레임워크 >
  - 핵심기술 : 스프링 DI컨테이너 , AOP 이벤트
  - 웹 기술 : 스프링 MVC, 스프링 WebFlux
  - 데이터 접근 기술 : 트랜잭션, JDBC, ORM지원, XML 지원
  - 테스트 : 스프링 기반 테스트
   => 등등 위와 같은 기술들을 포괄하는 프레임 워크

 < 스프링 부트 >
  - 스프링을 편리하게 사용할 수 있도록 지원
  - 단독으로 실행할 수 있는 스프링 애플리케이션을 쉽게 생성
  * Tomcat같은 웹 서버를 내장해서 별도의 웹 서버를 설치하지 않아도 됨
   => 기존 스프링에서는 웹 개발을 할 경우 tomcat서버를 설치하고 소스 빌드후 넣고 해야했다.
  - 손쉬운 필드 구성을 위한 starter 종속성 제공 ( build.grade 파일에 선언)
   => spring-boot-aop-starter, data-jpa-stater 등 starter 하나만 선언하면 관련된 라이브러리들을 모두 사용 가능
   => Gradle은 의존관계가 있는 라이브러리를 함께 다운로드 한다.

  * Spring Boot 핵심 라이브러리
   1. spring-boot-starter
     - spring-boot
       - spring-core
     - spring-boot-starter-logging
       - logback,slf4j
   2. Spring-boot-starter-test
     - junit : 테스트 프레임워크
     - spring-test : 스프링 통합 테스트 지원
     - asserts: 테스트 코드를 좀 더 편하게 작성할 수 있도록 지원
   2. spring-boot-starter-web
     - spring-boot-starter-tomcat: 톰캣(웹서버)
     - spring-webmvc:스프링 웹 MVC

----
[좋은 객체지향 프로그래밍]

 < 스프링의 핵심 >
  - 스프링은 자바 언어 기반의 프레임워크
  - 자바의 가장 큰 특징은 객체 지향 언어
  - 스프링은 객체 지향 언어가 가진 강력한 특징을 살려내는 프레임워크
  - 스프링은 좋은 객체 지향 어플리케이션을 개발할 수 있게 도와주는 프레임워크

 < 역할과 구현을 분리> _ 실생활
  - 역할과 구현으로 구분하면 유연하고, 변경도 편리해진다.
   => 클라이언트는 대상의 역할(자동차)만 알면 된다.
   => 클라이언트는 구현 대상(G80,K5,SONATA)의 내부 구조를 몰라도 된다.
   => 클라이언트는 구현 대상의 내부 구조가 변경되어도 영향을 받지 않는다.
   => 클라이언트는 구현 대상 자체를 변경해도 (K5 -> G80) 영향을 받지 않는다.

< 역할과 구현을 분리> _ JAVA
    * 다형성
    - 하나의 객체가 여러 타입을 갖을 수 있는 것
    - 인터페이스를 만들고 이를 활용하여 구현 객체를 만들어낸다.
      -> 하나의 인터페이스에서 파생되어 큰 틀이 동일하고 세부 기능이 다르다. 유저는 본인들이 필요로하는 구현체를 찾아 사용하면된다.

 - 자바 언어의 다형성을 활용
   => 역할 = 인터페이스, 구현 = 인터페이스를 구현한 클래스, 구현 객체
 - 객체 설계시 인터페이스를 먼저 부여하고, 그 역할을 수행하는 구현 객체 만들기
---

---
 < 제어의 역전 - IoC (Inversion of Control) >
  - 기존 프로그램은 클라이언트 구현 객체가 스스로 필요한 서버의 구현 객체를 생성하고, 연결하고, 실행한다.
    -> OrderServiceImple 에서 인터페이스를 선언하고 new 로 구현체를 생성했다. (OCP, DIP 위반)
  - 반면에 AppConfig가 등장한 이후 구현체는 자신의 로직을 실행하는 역할만 담당한다.
  - 이렇듯 프로그램의 제어 흐름을 직접 제어하는 것이 아니라 외부에서 관리하는 것을 제어의 역전(IoC)이라 한다.

 < 의존관계 주입 - DI (Dependency Injection) >
  - 애플리케이션 실행시점에 외부에서(AppConfig) 실제 구현 객체를 생성하고 클라이언트에 전달해서 클라이언트와 서버의 실제 의존관계가 연결되는 것을
    의존관계 주입 이라 한다.
  - 의존관계 주입을 사용하면 클라이언트 코드를 변경하지 않고, 클라이언트가 호출하는 대상의 타입 인스턴스를 변경할 수 있다.

< IoC 컨테이너, DI컨테이너 >
  - AppConfig 처럼 객체를 생성하고 관리하면서 의존관계를 연결해주는 것을
  - IoC 컨테이너, DI컨테이너 라고 한다. ( 주로 DI컨테이너 라고 한다.)
---

---
< 순수자바코드(core_prac)를 스프링 코드(core)로 변환 >

 [ AppConfg 수정 ]
  - @Configuration 추가
  - @Bean 추가

 [ 스프링 컨테이너 ]
  - ApplicationContext를 스프링 컨테이너라고 한다.
  - 기존(core_prac)에는 AppConfig를 사용해서 MemberApp, orderApp에서 직접 객체를 생성하고 DI를 했지만 스프링 컨테이너를 통해서 사용하도록 변경한다.
  - 스프링 컨테이너는 @Configuration이 붙은 AppConfig를 설정 정보로 사용하고, @Bean 이 붙어있는 메서드를 호출해서 반환된 객체를 스프링 컨테이너에 등록한다.
    ( 등록된 객체를 스프링 빈 이라고 한다.)
  - 스프링 빈은 호출된 메서드의 이름을 사용한다. (memberService, orderService)
  - 스프링 빈은 ApplicationContext.getBean(name,type) 메서드를 사용해서 찾을 수 있다.

  @Configuration
  public class AppConfig {

    @Bean
    public MemberService memberService(){ // 스프링 빈 이름 : memberService
        return new MemberServiceImpl(memberRepository());
    }

  }

  -> 외부에서 사용할때는
  ApplicationContext applicationContext = new AnnotationConfigApplicationContext(AppConfig.class);
  MemberService memberService = applicationContext.getBean("memberService", MemberService.class);

  - 코드가 더 복잡해진거 같은데, 스프링 컨테이너를 사용하면 어떤 장점이 있을가


진행 : 주문 프로그램 개발 -> OCP,DIP 위반 -> AppConfig를 통한 의존성 주입 -> Spring Bean 을 활용해 AppConfig 변경

[싱글톤 패턴]
  <웹 애플리케이션과 싱글톤>
  기존에 만들었던(Bean 등록 전) 순수한 DI컨테이너인 Appconfig는 서비스를 요청할때마다 새로운 객체를 생성한다.
  웹 애플리케이션은 다수의 사용자가 있기 때문에 여러개의 객체가 생성될 수 있기 때문에 메모리 낭비가 심하다.
  해당 객체는 ex)memberServiceImple 는 1개만 생성하고 공유되도록 설계해야한다.

  < 싱글톤 패턴 >
  클래스의 인스턴스가 딱 1개만 생성되는 것을 보장하는 디자인 패턴이다.
    -> Test >  SingletonService, SingletonTest
  여러 단점이 존재, 하지만 spring 컨테이너에서 단점을 보완해줌

  < 싱글톤 컨테이너 >
  - 스프링 컨테이너는 싱글톤 패턴의 문제점을 해결하면서, 객체 인스턴스를 싱글톤(1개만 생성) 으로 관리한다.
  - 스프링 컨테이너는 싱글톤 패턴을 적용하지 않아도, 객체 인스턴스를 싱글톤으로 관리한다. ( 빈이름 : memberService, 빈객체:MemberService.class)
  - 스프링 컨테이너는 싱클톤 컨테이너 역할을 한다.
  - 스프링 컨테이너 덕분에 고객의 요청이 올 때 마다 객체를 생성하는게 아니라, 이미 만들어진 객체를 공유한다.

  < 싱글톤 방식의 주의점 >
     -> StatefulService, StatefulServiceTest
  - 여러 클라이언트가 하나의 객체 인스턴스를 공유하기때문에 싱글톤 객체는 상태를 유지(Stateful)하게 설계하면 안된다.
    -> 멀티 스레드 (사용자의 요청을 하나의 스레드로 본다.) 문제
    * 값을 변경할 수 있는 필드가 있으면 안된다. (price)
    * 가급적 읽기만 가능해야 한다.
  - 무상태로 설계해야 한다.
    * 의존적인 필드가 있으면 안된다.

 < @Configuration 과 싱글톤 > _ AppConfig, ConfigurationSingletonTest
  - @Bean memberService를 실행하면 new MemoryMemberRepository()가 실행되면서 인스턴스가 생성되고
  - @Bean orderService를 실행해도 new MemoryMemberRepository()가 실행되면서 인스턴스가 생성된다.
     => 두개의 인스턴스가 생기는것처럼 보이긴 하지만 하나의 인스턴스를 사용한다.
     이유는, @Configuration을 적용하면 CGLIB라는 바이트코드 조작 라이브러리를 사용해서 AppConfig클래스를 상속받은
     임의의 다른 클래스를 만들고 그 클래스를 스프링 빈으로 등록한 것이다.
       (new AnnotationConfigApplicationContext(AppConfig.class)를 하면 AppConfig도 스프링 빈으로 등록됨)
      @Configuration을 붙임으로써 CGLIB를 통해
      @Bean이 붙은 메서드 마다 이미 스프링 빈이 존재하면 존재하는 빈을 반환하고 (타입으로 찾아낸다.), 스프링 빈이 없으면 새로 생성하는 것이다.
      위와같이 new MemoryMemberRepository()가 두번 호출되긴 하지만 @Bean memberRepository에서 한번 생성했으므로 memberService를, orderService때는
      존재하는 빈을 사용하기때문에 싱글톤 패턴이 유지된다.

      ** @Configuration 을 빼더라도 @Bean이 있으면 빈 등록은 가능하지만 싱글톤은 유지하지 못한다.( 인스턴스가 3개 생김 )

[ 컴포넌트 스캔과 의존관계 자동 주입 ]
  지금까지 스프링 빈을 등록할 때는 @Bean을 사용하여 설정 정보에 직접 등록할 스프링 빈을 나열 했었다.
  하지만 등록해야할 스프링빈이 수백개면 누락될 수 있고, 귀찮아진다.
  그래서 스프링은 설정 정보가 없어도 자동으로 스프링 빈을 등록하는 컴포넌트 스캔이라는 기능을 제공하고
  의존관계도 자동으로 주입하는 @Autowired라는 기능을 제공한다.

  < @ComponentScan > _ AutoAppConfig    _ P.88
  - @Component가 붙은 클래스를 스캔해서 스프링 빈으로 등록한다. (MemoryMemberRepository, MemberServiceImple, RateDiscountPolicy에 @Component 추가 )
  - 기존에는 AppConfig에서 의존성을 주입해줬지만 AutoAppConfig는 텅 비어있으니 Autowired로 의존성을 자동 주입해준다.
  - 생성자에 @Autowired를 지정하면, 스프링 컨테이너가 자동으로 해당 스프링 빈을 찾아서(타입으로 찾는다.) 주입한다.
  - 생성자가 하나이면 @Autowired 생략 가능

  < 스캔 위치와 기본 스캔대상 >
  기본적으로 @ComponentScan가 있는 설정파일의 위치를 기준으로 탐색을 시작한다.(@Component 찾기)
  보통 설정 정보 클래스(AutoConfig, AppConfig)들은 프로젝트 최상단에 위치시킨다 -> 모든 @Component 찾을 수 있음
  스프링 부트 프로젝트를 생성하면 자동으로 CoreApplication이 생성되는데, 이 안에 포함된 @SpringBootApplication이 @ComponentScan을 지원한다.
  따라서 @Component만 붙이면 자동으로 빈에 등록된다.
   스캔대상 : @Controller, @Service, @Repository, @Configuration 모두 스캔되어 빈으로 등록된다.

   < 중복 빈 등록과 충돌>
   1. 자동 빈 등록 vs 자동 빈 등록
    -> ConflictingBeanDefinitionException 예외 발생

   2. 수동 빈 등록 vs 자동 빈 등록 _ AutoAppConfig
     ( @Bean 등록 vs @Component )
     이 경우 수동 빈 등록이 우선권을 갖는다.
       -> 최신 스프링 부트는 에러가 발생한다.

   < 의존 관계주입 : @Autowired 의 옵션 > _ AutowiredTest
     - @Autowired(required = false) : 컨테이너에 자동 주입할 대상이 없으면 생성자를 호출하지 않는다.
     - @Autowired
       public void setNoBean2(@Nullable Member noBean2) : 자동 주입할 대상이 없으면 null이 입력된다.
     - @Autowired
       public void setNoBean3(Optional<Member> noBean3) : 자동 주입할 대상이 없으면 Optional.empty이 입력된다.


  < 롬복과 최신 트랜드 > _ HelloLombok
    - 라이브러리 중 하나로 코드를 경량화 시켜준다. ( 생성자, 수정자[Getter,Setter] 를 자동으로 생성해준다. )
    - 보통 생성자를 통해 의존성을 주입하는 코드를 작성했지만, Lombok의 @RequiredArgsConstructor를 통해 생략할 수 있다.
    - 생성자가 하나일 경우 @Autowired는 생략 가능하므로 의존성 자동주입 까지 가능

     ex ) OrderServiceImpl.class

        private final MemberRepository memberRepository;
        private final DiscountPolicy discountPolicy;
        @Autowired
         public OrderServiceImpl(MemberRepository memberRepository, DiscountPolicy discountPolicy) {
             this.memberRepository = memberRepository;
             this.discountPolicy = discountPolicy;

         }

         위의 코드에서 @RequiredArgsConstructor 적용시키면
          @Autowired
          public OrderServiceImpl(~~) 부분을 생략할 수 있다.

     -> final로 선언된 변수들은 값이 꼭 필요하기때문에 @RequiredArgsConstructor가 해당 변수들에 의존성을 주입한다.

  < 조회 빈이 2개 이상일 때>
  (Autowired 일때 타입으로 스프링 컨테이너에서 빈을 찾는다.)
  예를 들어 OrderServiceImpl.class 에서 discountPolicy 의존성 자동주입 시 등록된 빈이 ( fixDis~, rate~ ) 두개일 경우 에러가 발생한다.

    [ 해결방법 1. @Autowired 필드 명 매칭 ]
      * 기존 코드
      @Autowired
      private DiscountPolicy discountPolicy

      * 변경 코드
      @Autowired
      private DiscountPolicy rateDiscountPolicy // 타입으로 검색 후 두개 이상이 있으면 필드명으로 빈 이름과 매칭한다.

    [ 해결방법 2. @Qualifier 사용]
      @Component인 fixDis~, rateDis~ 에 @Qualifier를 추가한 후 @Autowired에서 찾아쓴다.

        @Autowired
        public OrderServiceImpl(MemberRepository memberRepository, @Qualifier("mainDiscountPolicy") DiscountPolicy discountPolicy) {
            this.memberRepository = memberRepository;
            this.discountPolicy = discountPolicy;
        }

    [ 해결방법 3. @Primary 사용]
    @Component인 fixDis~, rateDis~ 에 우선순위를 정해주는 것이다.

    => 여기까지 보면 @Primary 와 @Qualifier 중에 어떤것을 선택하면 좋을지 고민일 것이다.
       @Qualifier 를 사용하면 모든 코드에 @Qualifier("~~")를 추가해주어야 한다.

  < 빈 생명주기 콜백 > _ Test > lifecycle
  데이터베이스 커넥션 풀이나, 네트워크 소켓처럼 애플리케이션 시작 시점에 필요한 연결을 미리 해두고, 종료 시점에 연결을 모두 종료하는 작업을 진행하려면
  객체의 초기화와 종료 작업이 필요하다. 스프링을 통해 이러한 초기화 작업과 종료 작업을 어떻게 진행하는지 예제로 알아볼것이다.

  애플리케이션이 실행되면 먼저, 객체들이 생성된 후 ( 스프링 컨테이너에 등록 ) 의존관계 주입을 하게된다. 따라서, 초기화 작업은 의존관계 주입이 완료된 후
  호출되어야 한다. 스프링은 의존관계 주입이 완료되면 스프링 빈에게 콜백 메서드를 통해 초기화 시점을 알려주는 기능을 제공한다. 또한 스프링은 스프링 컨테이너가
  종료되기 직전 소멸 콜백을 준다.

    *스프링 빈의 이벤트 라이프사이클
     스프링컨테이너 생성 > 스프링 빈 생성 > 의존관계 주입 > 초기화 콜백 > 사용 > 소멸전 콜백 > 스프링 종료

    * 스프링은 크게 3가지 방법으로 빈 생명지기 콜백을 지원한다.
     - 인터페이스(InitializingBean, DisposableBean) ( 거의 사용하지 않음 )
     - 설정 정보에 초기화 메서드, 종료 메서드 지정
     - @PostConstruct, @PreDestory 애노테이션 지원


  < 빈 스코프>

    [ 빈 스코프란 ]
    스프링 빈이 스프링 컨테이너의 시작과 함께 생성되어서 스프링 컨테이너가 종료될 때 까지 유지된다. 이것은 스프링 빈이 기본적으로 싱클톤 스코프로
    생성되기 때문이다. 스코프는 빈이 존재할 수 있는 범위를 뜻한다.

    [ 스프링은 다양한 스코프를 지원한다. ] _ 싱글톤, 프로토타입, request 정도 알아두면 될듯.
     - 싱글톤 : 기본 스코프, 스프링 컨테이너의 시작과 종료까지 유지되는 가장 넓은 범위의 스코프이다.
     - 프로토타입 : 스프링 컨테이너가 프로토타입 빈의 생성과 의존관계 주입까지만 관여하고 더는 관리하지 않는 매우 짧은 범위의 스코프이다.
     - 웹 관련 스코프
       * request : 웹 요청이 들어오고 나갈때 까지 유지되는 스코프이다.
       * session : 웹 세션이 생성되고 종료될 때 까지 유지되는 스코프이다.
       * application : 웹의 서블릿 컨텍스와 같은 범위로 유지되는 스코프이다.

    [ 프로토타입 스코프 ] > Test > PrototypeTest
    싱글톤 스코프의 빈을 조회하면 스프링 컨테이너는 항상 같은 인스턴스의 스프링 빈을 반환하지만, 프로토타입 스코프는 새로운 인스턴스를 생성해서 반환한다.
    스프링 컨테이너는 프로토타입 빈을 생성하고, 의존관계 주입, 초기화까지만 처리하기때문에 처음 생성된 빈 정보를 알수 없다.
    따라서 @preDestory 같은 종료 메서드가 호출되지 않는다.

    [ 웹 스코프 ]
    웹 환경에서만 동장하고 스프링이 해당 스코프의 종료시점까지 관여한다.

    * 웹 스코프 종류
     - request : HTTP 요청 하나가 들어오고 나갈 때 까지 유지되는 스코프, 각각의 HTTP 요청마다 별도의 빈 인스턴스가 생성되고, 관리된다.
     - session : HTTP Session과 동일한 생명주기를 가지는 스코프
     - application : 서블릿 컨텍스트(ServletContext)와 동일한 생명주기를 가지는 스코프
     - websocket : 웹 소켓과 동일한 생명주기를 가지는 스코프프


